import time
import random
import pandas as pd
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import streamlit as st
import os
import tempfile
from webdriver_manager.chrome import ChromeDriverManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(page_title="–ü–∞—Ä—Å–µ—Ä –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç", page_icon="üó∫Ô∏è")
st.title("–ü–∞—Ä—Å–µ—Ä –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Å—ã–ª–æ–∫ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã (–≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ, –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞).")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
def setup_driver():
    chrome_options = Options()
    chrome_options.add_argument("--headless=new")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36")
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    return driver

# –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
def parse_yandex_maps(url, driver):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç"""
    driver.get(url)
    time.sleep(random.uniform(2, 4))
    
    def get_text(xpath, default="–ù–µ –Ω–∞–π–¥–µ–Ω"):
        try:
            element = WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.XPATH, xpath)))
            return element.text if element.text else default
        except:
            return default
    
    def get_phone(xpath, default="–ù–µ –Ω–∞–π–¥–µ–Ω"):
        try:
            element = WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.XPATH, xpath)))
            phone = element.text
            if phone:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ phone –Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–æ–π
                return phone.split("\n")[0]
            return default
        except:
            return default
    
    try:
        rating_element = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.XPATH, "//span[contains(@class, 'business-rating-badge-view__rating-text')]"))
        )
        rating = rating_element.text if rating_element.text else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
    except:
        rating = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    try:
        reviews_element = WebDriverWait(driver, 10).until(
            EC.visibility_of_element_located((By.XPATH, "//div[contains(@class, 'business-header-rating-view__text')]"))
        )
        reviews = reviews_element.get_attribute("aria-label").strip() if reviews_element.get_attribute("aria-label") else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
    except:
        reviews = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    data = {
        "–°—Å—ã–ª–∫–∞": url,
        "–ù–∞–∑–≤–∞–Ω–∏–µ": get_text("//h1"),
        "–ê–¥—Ä–µ—Å": get_text("//div[contains(@class, 'business-contacts-view__address')]/a"),
        "–ú–µ—Ç—Ä–æ": get_text("//div[contains(@class, 'masstransit-stops-view__stop-name')]"),
        "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã": get_text("//div[contains(@class, 'business-card-working-status-view__text')]"),
        "–¢–µ–ª–µ—Ñ–æ–Ω": get_phone("//div[contains(@class, 'card-phones-view__phone-number')]"),
        "–°–∞–π—Ç": get_text("//span[contains(@class, 'business-urls-view__text')]"),
        "–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞": rating,
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫": reviews
    }
    return data

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
def process_file(uploaded_file):
    try:
        df = pd.read_excel(uploaded_file, header=None)
        urls = df[0].dropna().tolist()
        if not urls:
            return None, "–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–æ–∫."
        driver = setup_driver()
        results = [parse_yandex_maps(url, driver) for url in urls]
        driver.quit()
        df_result = pd.DataFrame(results)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            output_path = tmp.name
            df_result.to_excel(output_path, index=False)
        return output_path, "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ yandex_maps_data.xlsx"
    except Exception as e:
        if 'driver' in locals():
            driver.quit()
        return None, f"–û—à–∏–±–∫–∞: {str(e)}"

# Streamlit-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª", type=["xlsx"])
if uploaded_file is not None:
    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"):
        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥..."):
            output_path, status = process_file(uploaded_file)
            st.write(status)
            if output_path:
                with open(output_path, "rb") as f:
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                        data=f,
                        file_name="yandex_maps_data.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
                os.unlink(output_path)